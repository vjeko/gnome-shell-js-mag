From 7896a3fa9de86c8fc5a3c8d7cee01ae1500bb408 Mon Sep 17 00:00:00 2001
From: Vjeko Brajkovic <vjeko@brajkovic.org>
Date: Thu, 19 Dec 2019 14:38:34 -0800
Subject: [PATCH] apply, fixes and script

---
 ui/magnifier.js | 152 +++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 123 insertions(+), 29 deletions(-)

diff --git a/ui/magnifier.js b/ui/magnifier.js
index 70b1291..ac4280e 100644
--- a/ui/magnifier.js
+++ b/ui/magnifier.js
@@ -40,6 +40,56 @@ const CROSS_HAIRS_OPACITY_KEY   = 'cross-hairs-opacity';
 const CROSS_HAIRS_LENGTH_KEY    = 'cross-hairs-length';
 const CROSS_HAIRS_CLIP_KEY      = 'cross-hairs-clip';
 
+const QuadTreeNode = class QuadTreeNode {
+    constructor(x, y) {
+        this._x = x;
+        this._y = y;
+
+        this.children = [null, null, null, null];
+    }
+};
+
+const QuadTree = class QuadTree {
+    constructor() {
+        this._root = null
+    }
+
+    _index([x1, y1,], [x2, y2]) {
+        return + (x1 > x2) * 2 + (y1 > y2);
+    }
+
+    find([x, y]) {
+        return this._find(this._root, [x, y]);
+    }
+
+    _find(node, [x, y]) {
+        if (!(node instanceof QuadTreeNode)) return node;
+
+        let idx = this._index([node._x, node._y], [x, y]);
+        return this._find(node.children[idx], [x, y]);
+    }
+
+    _insert(node, newNode) {
+        if (node == null || !(node instanceof QuadTreeNode))  return newNode;
+
+        let idx = this._index([node._x, node._y], [newNode._x, newNode._y]);
+        node.children[idx] = this._insert(node.children[idx], newNode);
+
+        return node;
+    }
+
+    insert([x, y], [width, height], value) {
+        var topLeftNode = new QuadTreeNode(x, y);
+        this._root = this._insert(this._root, topLeftNode);
+        topLeftNode.children[0] = value;
+
+        var bottomRightNode = new QuadTreeNode(x + width, y + height);
+        this._root = this._insert(this._root, bottomRightNode);
+        bottomRightNode.children[3] = value;
+    }
+};
+
+
 var MouseSpriteContent = GObject.registerClass({
     Implements: [Clutter.Content],
 }, class MouseSpriteContent extends GObject.Object {
@@ -90,8 +140,16 @@ var MouseSpriteContent = GObject.registerClass({
 
 var Magnifier = class Magnifier {
     constructor() {
+        log("Constructor");
         // Magnifier is a manager of ZoomRegions.
         this._zoomRegions = [];
+        this._tree = new QuadTree();
+
+        log("Number of screens " + Main.layoutManager.monitors.length);
+        for (let i = 0; i < Main.layoutManager.monitors.length; i++) {
+            let m = Main.layoutManager.monitors[i];
+            this._tree.insert([m.x, m.y], [m.width, m.height], i);
+        }
 
         // Create small clutter tree for the magnified mouse.
         let cursorTracker = Meta.CursorTracker.get_for_display(global.display);
@@ -108,10 +166,15 @@ var Magnifier = class Magnifier {
 
         [this.xMouse, this.yMouse] = global.get_pointer();
 
-        let aZoomRegion = new ZoomRegion(this, this._cursorRoot);
-        this._zoomRegions.push(aZoomRegion);
-        this._settingsInit(aZoomRegion);
-        aZoomRegion.scrollContentsTo(this.xMouse, this.yMouse);
+        log("Creating Zoom Regions");
+        for (let i = 0; i < Main.layoutManager.monitors.length; i++) {
+            let m = Main.layoutManager.monitors[i];
+            let aZoomRegion = new ZoomRegion(this, this._cursorRoot, m.x, m.y, m.width, m.height);
+            log("Adding ZoomRegion");
+            log(aZoomRegion);
+            this._zoomRegions.push(aZoomRegion);
+            this._settingsInit(aZoomRegion);
+        }
 
         St.Settings.get().connect('notify::magnifier-active', () => {
             this.setActive(St.Settings.get().magnifier_active);
@@ -235,11 +298,12 @@ var Magnifier = class Magnifier {
             this.xMouse = xMouse;
             this.yMouse = yMouse;
 
+            let monitorIdx = this._tree.find([xMouse, yMouse]);
+            let zoomRegion = this._zoomRegions[monitorIdx];
             let sysMouseOverAny = false;
-            this._zoomRegions.forEach(zoomRegion => {
-                if (zoomRegion.scrollToMousePos())
-                    sysMouseOverAny = true;
-            });
+            if (zoomRegion.scrollToMousePos())
+                sysMouseOverAny = true;
+
             if (sysMouseOverAny)
                 this.hideSystemCursor();
             else
@@ -619,9 +683,12 @@ var Magnifier = class Magnifier {
     _updateMagFactor() {
         // Applies only to the first zoom region.
         if (this._zoomRegions.length) {
+            let [xMouse, yMouse] = global.get_pointer();
             // Mag factor is accurate to two decimal places.
             let magFactor = parseFloat(this._settings.get_double(MAG_FACTOR_KEY).toFixed(2));
-            this._zoomRegions[0].setMagFactor(magFactor, magFactor);
+            let monitorIdx = this._tree.find([xMouse, yMouse]);
+            let zoomRegion = this._zoomRegions[monitorIdx];
+            zoomRegion.setMagFactor(magFactor, magFactor);
         }
     }
 
@@ -711,7 +778,7 @@ var Magnifier = class Magnifier {
 Signals.addSignalMethods(Magnifier.prototype);
 
 var ZoomRegion = class ZoomRegion {
-    constructor(magnifier, mouseSourceActor) {
+    constructor(magnifier, mouseSourceActor, x, y, width, height) {
         this._magnifier = magnifier;
         this._focusCaretTracker = new FocusCaretTracker.FocusCaretTracker();
 
@@ -734,10 +801,10 @@ var ZoomRegion = class ZoomRegion {
         this._crossHairs = null;
         this._crossHairsActor = null;
 
-        this._viewPortX = 0;
-        this._viewPortY = 0;
-        this._viewPortWidth = global.screen_width;
-        this._viewPortHeight = global.screen_height;
+        this._viewPortX = x;
+        this._viewPortY = y;
+        this._viewPortWidth = width;
+        this._viewPortHeight = height;
         this._xCenter = this._viewPortWidth / 2;
         this._yCenter = this._viewPortHeight / 2;
         this._xMagFactor = 1;
@@ -982,6 +1049,20 @@ var ZoomRegion = class ZoomRegion {
                 roiWidth, roiHeight];
     }
 
+    _clip(xCenter, yCenter, xFactor, yFactor, width, height) {
+        if (this._clampScrollingAtEdges) {
+            let roiWidth = width / xFactor;
+            let roiHeight = height / yFactor;
+
+            xCenter = Math.min(xCenter, this._viewPortX + width - roiWidth / 2);
+            xCenter = Math.max(xCenter, this._viewPortX + roiWidth / 2);
+            yCenter = Math.min(yCenter, this._viewPortY + height - roiHeight / 2);
+            yCenter = Math.max(yCenter, this._viewPortY + roiHeight / 2);
+        }
+
+        return [xCenter, yCenter];
+    }
+
     /**
      * setLensMode:
      * Turn lens mode on/off.  In full screen mode, lens mode does nothing since
@@ -1343,18 +1424,13 @@ var ZoomRegion = class ZoomRegion {
     _setViewPort(viewPort, fromROIUpdate) {
         // Sets the position of the zoom region on the screen
 
-        let width = Math.round(Math.min(viewPort.width, global.screen_width));
-        let height = Math.round(Math.min(viewPort.height, global.screen_height));
+        let width = Math.round(Math.min(viewPort.width, this._viewPortWidth));
+        let height = Math.round(Math.min(viewPort.height, this._viewPortHeight));
         let x = Math.max(viewPort.x, 0);
         let y = Math.max(viewPort.y, 0);
 
-        x = Math.round(Math.min(x, global.screen_width - width));
-        y = Math.round(Math.min(y, global.screen_height - height));
-
-        this._viewPortX = x;
-        this._viewPortY = y;
-        this._viewPortWidth = width;
-        this._viewPortHeight = height;
+        x = Math.round(Math.min(x, this._viewPortWidth - width));
+        y = Math.round(Math.min(y, this._viewPortHeight - height));
 
         this._updateMagViewGeometry();
 
@@ -1533,11 +1609,16 @@ var ZoomRegion = class ZoomRegion {
         return [xPoint, yPoint];
     }
 
-    _screenToViewPort(screenX, screenY) {
+    _screenToViewPort(screenX, screenY, [xMouse, yMouse],
+                                xFactor, yFactor, width, height) {
+
+        let [xCenter, yCenter] = this._clip(
+            xMouse, yMouse, xFactor, yFactor, width, height);
+
         // Converts coordinates relative to the (unmagnified) screen to coordinates
         // relative to the origin of this._magView
-        return [this._viewPortWidth / 2 + (screenX - this._xCenter) * this._xMagFactor,
-                this._viewPortHeight / 2 + (screenY - this._yCenter) * this._yMagFactor];
+        return [width / 2 + (screenX - xCenter) * xFactor,
+            height / 2 + (screenY - yCenter) * yFactor];
     }
 
     _updateMagViewGeometry() {
@@ -1560,7 +1641,13 @@ var ZoomRegion = class ZoomRegion {
         this._uiGroupClone.set_scale(this._xMagFactor, this._yMagFactor);
         this._mouseActor.set_scale(this._xMagFactor, this._yMagFactor);
 
-        let [x, y] = this._screenToViewPort(0, 0);
+        let [mx, my] = this._centerFromMousePosition(
+            this._xMagFactor, this._yMagFactor,
+            this._viewPortWidth, this._viewPortHeight);
+
+        let [x, y] = this._screenToViewPort(0, 0, [mx, my],
+            this._xMagFactor, this._yMagFactor,
+            this._viewPortWidth, this._viewPortHeight);
         this._uiGroupClone.set_position(Math.round(x), Math.round(y));
 
         this._updateMousePosition();
@@ -1570,8 +1657,15 @@ var ZoomRegion = class ZoomRegion {
         if (!this.isActive())
             return;
 
+        let [mx, my] = this._centerFromMousePosition(
+            this._xMagFactor, this._yMagFactor,
+            this._viewPortWidth, this._viewPortHeight);
+
         let [xMagMouse, yMagMouse] = this._screenToViewPort(this._magnifier.xMouse,
-                                                            this._magnifier.yMouse);
+            this._magnifier.yMouse,
+            [mx, my],
+            this._xMagFactor, this._yMagFactor,
+            this._viewPortWidth, this._viewPortHeight);
 
         xMagMouse = Math.round(xMagMouse);
         yMagMouse = Math.round(yMagMouse);
@@ -1581,7 +1675,7 @@ var ZoomRegion = class ZoomRegion {
         if (this._crossHairsActor) {
             let [groupWidth, groupHeight] = this._crossHairsActor.get_size();
             this._crossHairsActor.set_position(xMagMouse - groupWidth / 2,
-                                               yMagMouse - groupHeight / 2);
+                yMagMouse - groupHeight / 2);
         }
     }
 
-- 
2.25.0.rc1

